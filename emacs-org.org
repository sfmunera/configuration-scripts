#+TITLE:  Org-Mode Settings
#+AUTHOR: Sebastián Múnera-Álvarez
#+EMAIL:  sfmunera@gmail.com
#+TAGS:   emacs

* Initial Settings

Org mode
#+BEGIN_SRC elisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
(require 'org)
#+END_SRC  

#+BEGIN_SRC elisp
  (setq org-src-fontify-natively t   ;; Pretty code blocks
        org-src-tab-acts-natively t
        org-confirm-babel-evaluate nil)
#+END_SRC

#+BEGIN_SRC elisp
  (setq org-directory "~/Private/org/")
  (setq org-todo-file (concat org-directory "work.org"))
  (setq org-archive-file (concat org-directory "archive.org"))
  (setq org-books-file (concat org-directory "books.org"))
  (setq org-journal-file (concat org-directory "journal.org"))
  (setq org-work-journal-file (concat org-directory "work-journal.org"))
#+END_SRC

* Keybindings

Standard key bindings
#+BEGIN_SRC elisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-cc" 'org-capture)
#+END_SRC

Hit =C-c t= to quickly open up my todo list.

#+BEGIN_SRC elisp
(defun sm/open-todo-file ()
  "Open the master org TODO list."
  (interactive)
  (find-file org-todo-file)
  (end-of-buffer))

(global-set-key (kbd "C-c t") 'sm/open-todo-file)
#+END_SRC

* Agenda Setup

Files that appear on the agenda.
#+BEGIN_SRC elisp
(setq org-agenda-files (list org-todo-file))
#+END_SRC

* ToDo keywords

#+BEGIN_SRC elisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "DOING(n)" "|" "DONE(d!)")
              (sequence "WAITING(w@/!)" "|" "CANCELLED(c@/!)"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("DOING" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold))))
#+END_SRC

Hitting =C-c C-x C-s= will mark a todo as done and move it to an
appropriate place in the archive.

#+BEGIN_SRC elisp
(defun hrs/mark-done-and-archive ()
  "Mark the state of an org-mode item as DONE and archive it."
  (interactive)
  (org-todo 'done)
  (org-archive-subtree))
(define-key org-mode-map (kbd "C-c C-x C-s") 'hrs/mark-done-and-archive)
#+END_SRC

Record the time that a todo was archived.

#+BEGIN_SRC elisp
(setq org-log-done 'time)
#+END_SRC

* Fast ToDo selection

Use *C-c C-t KEY* to go directly to another state.

#+BEGIN_SRC elisp
(setq org-use-fast-todo-selection t)
#+END_SRC

To cycle through states without modifying the timestamp, use *S-left*
and *S-right*.

#+BEGIN_SRC elisp
(setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+END_SRC

* Capture templates
  #+BEGIN_SRC elisp
  (setq org-capture-templates
      '(("f" "Finished book"
         table-line (file org-books-file)
         "| %^{Title} | %^{Author} | %u |")

        ("r" "Reading"
         checkitem (file org-books-file))

        ("t" "Todo"
         entry (file+headline org-todo-file "Organize")
         "* TODO %?\n")

        ("j" "Journal" 
         entry (file+datetree org-journal-file)
         "* %?"
         :empty-lines 1)

        ("w" "Work Journal" 
         entry (file+datetree org-work-journal-file)
         "* %?"
         :empty-lines 1)))
  #+END_SRC
* Literate Programming

  The trick to literate programming is in the [[http://orgmode.org/worg/org-contrib/babel/intro.html][Babel project]], which
  allows org-mode to not only interpret source code blocks, but
  evaluate them and tangle them out to a file.

  #+BEGIN_SRC elisp
   (use-package org
     :config
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((sh         . t)
        (emacs-lisp . t)
        (python     . t)
        (dot        . t)
        (latex      . t)
        (plantuml   . t))))
  #+END_SRC

* Display preferences

First download *org-bullets.el* and put it in =~/.emacs.d/elisp/=.

  #+BEGIN_SRC elisp
    (use-package org-bullets
      :init
      (add-hook 'org-mode-hook #'org-bullets-mode))
    (setq org-hide-leading-stars t)
  #+END_SRC

Show an arrow instead of ellipsis when a org subtree is collapsed.

  #+BEGIN_SRC elisp
    (setq org-ellipsis "⤵")
  #+END_SRC

* Technical Artifacts

Need to provide the =init-org-mode= so that I can require this
package.

#+BEGIN_SRC elisp
(provide 'init-org-mode)
#+END_SRC

Before you can build this on a new system, make sure that you put
the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs Initialization of Org-Mode
#+PROPERTY:    results silent
#+PROPERTY:    header-args:sh  :tangle no
#+PROPERTY:    tangle ~/.emacs.d/elisp/init-org-mode.el
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
