#+TITLE:  Org-Mode Settings
#+AUTHOR: Sebastián Múnera-Álvarez
#+EMAIL:  sfmunera@gmail.com
#+TAGS:   emacs

* Initial Settings
#+BEGIN_SRC elisp
  (use-package org
    :ensure t        ; But it comes with Emacs now!?
    :init
    (setq org-use-speed-commands t
          org-hide-emphasis-markers t
          org-completion-use-ido t
          org-outline-path-complete-in-steps nil
          org-src-fontify-natively t   ;; Pretty code blocks
          org-src-tab-acts-natively t
          org-confirm-babel-evaluate nil
          org-todo-keywords '((sequence "TODO(t)" "DOING(g)" "|" "DONE(d)")
                              (sequence "|" "CANCELED(c)")))
    (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
    (add-hook 'org-mode-hook 'yas-minor-mode-on)
    :bind (("C-c l" . org-store-link)
           ("C-c c" . org-capture)
           ("C-M-|" . indent-rigidly))
    :config
    (define-key org-mode-map (kbd "M-C-n") 'org-end-of-item-list)
    (define-key org-mode-map (kbd "M-C-p") 'org-beginning-of-item-list)
    (define-key org-mode-map (kbd "M-C-u") 'outline-up-heading)
    (define-key org-mode-map (kbd "M-C-w") 'org-table-copy-region)
    (define-key org-mode-map (kbd "M-C-y") 'org-table-paste-rectangle)
  
    (define-key org-mode-map [remap org-return] (lambda () (interactive)
                                                  (if (org-in-src-block-p)
                                                      (org-return)
                                                    (org-return-indent)))))
#+END_SRC

* Color and Display

  Displaying the headers using various bullets.

  #+BEGIN_SRC elisp
    (use-package org-bullets
       :ensure t
       :init (add-hook 'org-mode-hook 'org-bullets-mode))
  #+END_SRC

* Literate Programming

  The trick to literate programming is in the [[http://orgmode.org/worg/org-contrib/babel/intro.html][Babel project]], which
  allows org-mode to not only interpret source code blocks, but
  evaluate them and tangle them out to a file.

  #+BEGIN_SRC elisp
   (use-package org
     :config
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((sh         . t)
        (js         . t)
        (emacs-lisp . t)
        (perl       . t)
        (scala      . t)
        (clojure    . t)
        (python     . t)
        (ruby       . t)
        (dot        . t)
        (css        . t)
        (latex      . t)
        (plantuml   . t))))
  #+END_SRC

* Summary TODO

#+BEGIN_SRC elisp
  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to TODO otherwise."
    (let (org-log-done org-log-states)   ; turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
  
  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+END_SRC
  
* Technical Artifacts

  Need to provide the =init-org-mode= so that I can require this
  package.

  #+BEGIN_SRC elisp
    (provide 'init-org-mode)
  #+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs Initialization of Org-Mode
#+PROPERTY:    results silent
#+PROPERTY:    header-args:sh  :tangle no
#+PROPERTY:    tangle ~/.emacs.d/elisp/init-org-mode.el
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
