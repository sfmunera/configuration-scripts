#+TITLE:  Org-Mode Settings
#+AUTHOR: Sebastián Múnera-Álvarez
#+EMAIL:  sfmunera@gmail.com
#+TAGS:   emacs

* Initial Settings

Org mode
#+BEGIN_SRC elisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
(require 'org)
#+END_SRC  

Standard key bindings
#+BEGIN_SRC elisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

#+BEGIN_SRC elisp
  (setq org-use-speed-commands t
            org-hide-emphasis-markers t
            org-completion-use-ido t
            org-outline-path-complete-in-steps nil
            org-src-fontify-natively t   ;; Pretty code blocks
            org-src-tab-acts-natively t
            org-confirm-babel-evaluate nil)
#+END_SRC

* Agenda Setup

Files that appear on the agenda.
#+BEGIN_SRC elisp
(setq org-agenda-files (quote ("~/Private/personal-files/org")))
#+END_SRC

* ToDo keywords

#+BEGIN_SRC elisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
              (sequence "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold))))
#+END_SRC

* Fast ToDo selection

Use *C-c C-t KEY* to go directly to another state.

#+BEGIN_SRC elisp
(setq org-use-fast-todo-selection t)
#+END_SRC

To cycle through states without modifying the timestamp, use *S-left*
and *S-right*.

#+BEGIN_SRC elisp
(setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+END_SRC

* Summary TODO

#+BEGIN_SRC elisp
  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to TODO otherwise."
    (let (org-log-done org-log-states)   ; turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
  
  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+END_SRC
* Literate Programming

  The trick to literate programming is in the [[http://orgmode.org/worg/org-contrib/babel/intro.html][Babel project]], which
  allows org-mode to not only interpret source code blocks, but
  evaluate them and tangle them out to a file.

  #+BEGIN_SRC elisp
   (use-package org
     :config
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((sh         . t)
        (emacs-lisp . t)
        (scala      . t)
        (clojure    . t)
        (python     . t)
        (ruby       . t)
        (dot        . t)
        (latex      . t)
        (plantuml   . t))))
  #+END_SRC

* Technical Artifacts

Need to provide the =init-org-mode= so that I can require this
package.

#+BEGIN_SRC elisp
(provide 'init-org-mode)
#+END_SRC

Before you can build this on a new system, make sure that you put
the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs Initialization of Org-Mode
#+PROPERTY:    results silent
#+PROPERTY:    header-args:sh  :tangle no
#+PROPERTY:    tangle ~/.emacs.d/elisp/init-org-mode.el
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
