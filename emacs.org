#+TITLE:  Emacs Configuration File
#+AUTHOR: Sebastián Múnera-Álvarez
#+EMAIL:  sfmunera@gmail.com
#+PROPERTY:    results silent
#+PROPERTY:    header-args:sh  :tangle no
#+PROPERTY:    tangle ~/.emacs
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org

* Introduction
So, I have been following Howard Abrams' blog about Emacs, and I
decided to follow his advice on [[http://www.howardism.org/Technical/Emacs/emacs-init.html][customizing Emacs]] using literate
programming! Much of what appears here is based on [[https://github.com/howardabrams/dot-files/blob/master/emacs.org][this Org file]].

*NOTE*: For every change, type =C-c C-v C-t=.

** General settings

#+BEGIN_SRC elisp
  (defconst ha/emacs-directory (concat (getenv "HOME") "/.emacs.d/"))
  
  (defun ha/emacs-subdirectory (d) (expand-file-name d ha/emacs-directory))
#+END_SRC

** Directory structure

Just to make sure that the following subdirectories exist:

#+BEGIN_SRC elisp
  (let* ((subdirs '("elisp" "backups" "snippets" "ac-dict" "templates"))
         (fulldirs (mapcar (lambda (d) (ha/emacs-subdirectory d)) subdirs)))
    (dolist (dir fulldirs)
      (when (not (file-exists-p dir))
        (message "Make directory: %s" dir)
        (make-directory dir))))
#+END_SRC

** Setting up the load path

Extra scripts go in =~/.emacs.d/elisp=:

#+BEGIN_SRC elisp
  (add-to-list 'load-path (ha/emacs-subdirectory "elisp"))
#+END_SRC

* Package installation

First, let's add the Emacs repositories:
  
#+BEGIN_SRC elisp
  (require 'package)
  
  (setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                           ("gnu"       . "http://elpa.gnu.org/packages/")
                           ("melpa"     . "http://melpa.milkbox.net/packages/")
                           ("marmalade" . "http://marmalade-repo.org/packages/")))
  (package-initialize)
  (package-refresh-contents)
#+END_SRC

To install a package: =M-x package-list-packages=.

** Use-package

#+BEGIN_SRC elisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  
  (require 'use-package)
#+END_SRC

* Variables
** Tabs vs Spaces

Let's just use spaces everywhere.

#+BEGIN_SRC elisp
  (setq-default indent-tabs-mode nil)
  (setq tab-width 3)
#+END_SRC

Make tab key do indent first then completion.

#+BEGIN_SRC elisp
  (setq-default tab-always-indent 'complete)
#+END_SRC

** Initial screen

#+BEGIN_SRC elisp
  (setq inhibit-splash-screen t)
  (setq inhibit-startup-screen t)
#+END_SRC
   
** Line and Column number

Show the current line and column numbers in the stats bar as well.
   
#+BEGIN_SRC elisp
  (line-number-mode t)
  (column-number-mode t)
#+END_SRC
   
** Highlight Parentheses

Highlight parentheses when the cursor is next to them:

#+BEGIN_SRC elisp
  (require 'paren)
  (show-paren-mode t)
#+END_SRC
   
* Display Settings

Let's just get more screen space:

#+BEGIN_SRC elisp
  (setq initial-scratch-message "")
  (setq visible-bell t)
  
  (when (window-system)
    (tool-bar-mode 0)
    (when (fboundp 'horizontal-scroll-bar-mode)
      (horizontal-scroll-bar-mode -1))
    (scroll-bar-mode -1))
#+END_SRC

** Fill-mode

Automatically wrapping when you get to the end of a line (or the
fill-region):

#+BEGIN_SRC elisp
  (use-package fill
    :bind ("C-c T f" . auto-fill-mode)
    :init (add-hook 'org-mode-hook 'turn-on-auto-fill)
    :diminish auto-fill-mode)
#+END_SRC

Number of characters until the fill column:

#+BEGIN_SRC elisp
  (setq fill-column 140)
#+END_SRC

* Key Bindings
** Manipulate size of windows

Add Hydra as a package:

#+BEGIN_SRC elisp
  (use-package hydra
    :ensure t
    :config
    (hydra-add-font-lock))
#+END_SRC

And now it is possible to use arrow keys to resize windows :)
=<f9>-arrow=.

#+BEGIN_SRC elisp
  (require 'windmove)
  
  (defun hydra-move-splitter-left (arg)
    "Move window splitter left."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (shrink-window-horizontally arg)
      (enlarge-window-horizontally arg)))
  
  (defun hydra-move-splitter-right (arg)
    "Move window splitter right."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (enlarge-window-horizontally arg)
      (shrink-window-horizontally arg)))
  
  (defun hydra-move-splitter-up (arg)
    "Move window splitter up."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (enlarge-window arg)
      (shrink-window arg)))
  
  (defun hydra-move-splitter-down (arg)
    "Move window splitter down."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (shrink-window arg)
      (enlarge-window arg)))
  
  (defhydra hydra-splitter (global-map "<f9>")
    "splitter"
    ("<left>" hydra-move-splitter-left)
    ("<down>" hydra-move-splitter-down)
    ("<up>" hydra-move-splitter-up)
    ("<right>" hydra-move-splitter-right))
#+END_SRC

** Jump to windows

Set up [[https://github.com/abo-abo/ace-window][ace-window]] mode:

#+BEGIN_SRC elisp
  (use-package ace-window
    :ensure t
    :init
      (setq aw-keys '(?a ?s ?d ?f g? h? ?j ?k ?l))
      (global-set-key (kbd "C-x o") 'ace-window)
      :diminish ace-window-mode)
#+END_SRC

This is really cool. When there are more than two windows, by
pressing =C-x o= it is possible to jump to any window by writing the
letter in the upper-left corner.
 
** Selecting a buffer

Use =IDO= for selecting buffers. =<f8>= shows the buffers in the
minibuffer. =S-<f8>= shows the buffers in another buffer:

#+BEGIN_SRC elisp
  (global-set-key (kbd "<f8>") 'ido-switch-buffer)
  (global-set-key (kbd "S-<f8>") 'ibuffer)
#+END_SRC

** Better jumping

This is a way to jump to chars or lines by using a tree approach
([[https://github.com/abo-abo/avy][avy]]). Really cool!

#+BEGIN_SRC elisp
  (use-package avy
    :ensure t
    :commands avy-goto-word-1 avy-goto-char-1 avy-goto-line avy-goto-char-timer
    :bind
    ("C-c j"   . avy-goto-word-1)
    ("s-j"     . avy-goto-word-1)    ; The Command key on Linux
    ("s-h"     . avy-goto-char-2)
    ("C-c k k" . avy-goto-char-timer)
    ("s-J"     . avy-goto-char-timer)    ; The Command key on Linux
    ("C-c k j" . avy-goto-word-1)
    ("C-c k c" . avy-goto-char-1)
    ("C-c k l" . avy-goto-line)
    ("C-c k p" . avy-pop-mark))
#+END_SRC

** Unfill paragraph

Unfilling a paragraph joins all the lines in a paragraph into a single
line with =M-Q=.

#+BEGIN_SRC elisp
  (defun unfill-paragraph ()
    "Takes a multi-line paragraph and makes it into a single line
  of text."
    (interactive)
    (let ((fill-column (point-max)))
      (fill-paragraph nil)))
  
  ;; Handy key definition
  (define-key global-map "\M-Q" 'unfill-paragraph)
#+END_SRC

** Multiple cursors

This is the [[https://github.com/emacsmirror/multiple-cursors][multiple-cursors]] functionality:

#+BEGIN_SRC elisp  
  (use-package multiple-cursors
    :ensure t
    :config
    (global-set-key
     (kbd "C-c C-.")
     (defhydra hydra-multiple-cursors ()
       "multiple-cursors"
       ("." mc/mark-all-dwim                   "all-dwim")
       ("C-." mc/mark-all-like-this-dwim       "all-like-dwim")
       ("n" mc/mark-next-like-this             "next")
       ("p" mc/mark-previous-like-this         "previous")
       ("a" mc/mark-all-like-this              "mark-all")
       ("N" mc/mark-next-symbol-like-this      "next-symbol")
       ("P" mc/mark-previous-symbol-like-this  "previous-symbol")
       ("A" mc/mark-all-symbols-like-this      "all-symbols")
       ("f" mc/mark-all-like-this-in-defun     "in-func")
       ("l" mc/edit-lines                      "all-lines")
       ("e" mc/edit-ends-of-lines              "end-lines"))))
  
#+END_SRC

Use =C-c C-.= and a menu option to select multiple cursors.

** Expand region

This is an extended version of the [[https://github.com/magnars/expand-region.el][expand-region]] taken from [[by ][here]]. To
select increasing regions around cursor, use =C-==.

#+BEGIN_SRC elisp
  (use-package expand-region
    :ensure t
    :config
    (defun ha/expand-region (lines)
      "Prefix-oriented wrapper around Magnar's `er/expand-region'.
  
  Call with LINES equal to 1 (given no prefix), it expands the
  region as normal.  When LINES given a positive number, selects
  the current line and number of lines specified.  When LINES is a
  negative number, selects the current line and the previous lines
  specified.  Select the current line if the LINES prefix is zero."
      (interactive "p")
      (cond ((= lines 1)   (er/expand-region 1))
            ((< lines 0)   (ha/expand-previous-line-as-region lines))
            (t             (ha/expand-next-line-as-region (1+ lines)))))
  
    (defun ha/expand-next-line-as-region (lines)
      (message "lines = %d" lines)
      (beginning-of-line)
      (set-mark (point))
      (end-of-line lines))
  
    (defun ha/expand-previous-line-as-region (lines)
      (end-of-line)
      (set-mark (point))
      (beginning-of-line (1+ lines)))
  
    :bind ("C-=" . ha/expand-region))
#+END_SRC

** Linux key bindings

   In Linux, use the Super key (Windows logo) for commonly used tasks.

   #+BEGIN_SRC elisp
     (global-set-key (kbd "s-z") 'undo-tree-undo)
     (global-set-key (kbd "s-y") 'undo-tree-redo)
     (global-set-key (kbd "s-Z") 'undo-tree-redo)

     (global-set-key (kbd "s-a") 'mark-whole-buffer)
     (global-set-key (kbd "s-f") 'isearch-forward-regexp)
     
     (global-set-key (kbd "s-o") 'ido-find-file)
     (global-set-key (kbd "s-s") 'save-buffer)
     (global-set-key (kbd "s-+") 'text-scale-increase)
     (global-set-key (kbd "s--") 'text-scale-decrease)
     (global-set-key (kbd "s-l") 'goto-line)
     (global-set-key (kbd "s-w") 'bury-buffer)
     (global-set-key (kbd "s-M-w") 'kill-this-buffer)
     
     (global-set-key (kbd "s-<up>") 'beginning-of-buffer)
     (global-set-key (kbd "s-<down>") 'end-of-buffer)
     (global-set-key (kbd "s-<left>") 'move-beginning-of-line)
     (global-set-key (kbd "s-<right>") 'move-end-of-line)
     
     (global-set-key (kbd "M-<up>") 'backward-page)
     (global-set-key (kbd "M-<down>") 'forward-page)
     (global-set-key (kbd "M-<left>") 'backward-word)
     (global-set-key (kbd "M-<right>") 'forward-word)
   #+END_SRC
* Loading and finding files
** IDO (Interactively Do Things)

#+BEGIN_SRC elisp
  (use-package ido
    :ensure t
    :init  (setq ido-enable-flex-matching t
                 ido-ignore-extensions t
                 ido-use-virtual-buffers t
                 ido-everywhere t)
    :config
    (ido-mode 1)
    (ido-everywhere 1)
    (add-to-list 'completion-ignored-extensions ".pyc"))
#+END_SRC

Now, it is more useful to see IDO results [[https://github.com/gempesaw/ido-vertical-mode.el][vertically]] (Nice!):

#+BEGIN_SRC elisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (setq ido-vertical-define-keys 'C-n-C-p-up-and-down)
    :config
    (ido-vertical-mode 1))
#+END_SRC

** Helm

#+BEGIN_SRC elisp
  (use-package helm
    :ensure t
    :init
    (use-package helm-config))
#+END_SRC
* Word processing
** TODO Auto insertion

It is possible to load pre-made templates in a blank file.

#+BEGIN_SRC elisp
  (use-package autoinsert
    :init
    (setq auto-insert-directory (ha/emacs-subdirectory "templates/"))
    ;; Don't want to be prompted before insertion:
    (setq auto-insert-query nil)
  
    (add-hook 'find-file-hook 'auto-insert)
    (auto-insert-mode 1))
#+END_SRC

Auto insertion requires entering data for particular fields, and for
that Yasnippet is better, so in this case, we combine them:

#+BEGIN_SRC elisp
  (defun ha/autoinsert-yas-expand()
    "Replace text in yasnippet template."
    (yas-expand-snippet (buffer-string) (point-min) (point-max)))
#+END_SRC

Now, it is possible to define templates for auto-insert:

#+BEGIN_SRC elisp
  (use-package autoinsert
    :config
    (define-auto-insert "\\.el$" ["default-lisp.el" ha/autoinsert-yas-expand]))
#+END_SRC

** TODO Yasnippets

[[https://github.com/capitaomorte/yasnippet][Yasnippets]] allows to load snippets of code into a file.

#+BEGIN_SRC elisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1)
    :config
    (add-to-list 'yas-snippet-dirs (ha/emacs-subdirectory "snippets")))
#+END_SRC

** Spell Checking

[[http://www.emacswiki.org/emacs/FlySpell][Flyspell]] is used here for spell checking. Uses [[http://aspell.net/][Aspell]].

Aspell needs to be installed first:

#+BEGIN_SRC sh :tangle no
  sudo apt-get install -y aspell
#+END_SRC

#+BEGIN_SRC elisp
  (use-package flyspell
    :ensure t
    :diminish flyspell-mode
    :init
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  
    (dolist (hook '(text-mode-hook org-mode-hook))
      (add-hook hook (lambda () (flyspell-mode 1))))
  
    (dolist (hook '(change-log-mode-hook log-edit-mode-hook org-agenda-mode-hook))
      (add-hook hook (lambda () (flyspell-mode -1))))
  
    :config
    (setq ispell-program-name "/usr/bin/aspell"
          ispell-dictionary "american" ; better for aspell
          ispell-extra-args '("--sug-mode=ultra" "--lang=en_US")
          ispell-list-command "--list")
  
    (add-to-list 'ispell-local-dictionary-alist '(nil
                                                  "[[:alpha:]]"
                                                  "[^[:alpha:]]"
                                                  "['‘’]"
                                                  t
                                                  ("-d" "en_US")
                                                  nil
                                                  utf-8)))
#+END_SRC

Aspell automatically configures a personal dictionary at
=~/.aspell.en.pws=, so no need to configure that.

* Miscellaneous
** Line Numbers

Turn automatically =linum-mode= for programming modes:

#+BEGIN_SRC elisp
  (add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC

Use =linum-relative= mode to insert relative line numbers.
To toggle between absolute and relative =linum-mode='s, use
=s-k= (Windows-k).

#+BEGIN_SRC elisp
(use-package linum-relative
  :ensure t
  :config
  ;; Otherwise, let's take advantage of the relative line numbering:
  (defun linum-new-mode ()
    "If line numbers aren't displayed, then display them.
     Otherwise, toggle between absolute and relative numbers."
    (interactive)
    (if linum-mode
        (linum-relative-toggle)
      (linum-mode 1)))

  :bind ("s-k" . linum-new-mode))
#+END_SRC

** Save File Position

Save the point position for every file, and restore it when that file
is reloaded.

#+BEGIN_SRC elisp
  (require 'saveplace)
  (setq-default save-place t)
  (setq save-place-forget-unreadable-files t)
  (setq save-place-skip-check-regexp "\\`/\\(?:cdrom\\|floppy\\|mnt\\|/[0-9]\\|\\(?:[^@/:]*@\\)?[^@/:]*[^@/:.]:\\)")
#+END_SRC

** Visual Regular Expressions

Hightlights the searches while writing a regular expression.

Begin with =C-c r= then type the regexp. To see the highlighted
matches, type =C-c a= before you hit ‘Return’ to accept it.

#+BEGIN_SRC elisp
  (use-package visual-regexp
    :ensure t
    :init
    (use-package visual-regexp-steroids :ensure t)
  
    :bind (("C-c r" . vr/replace)
           ("C-c q" . vr/query-replace))
  
    ;; if you use multiple-cursors, this is for you:
    :config (use-package  multiple-cursors
              :bind ("C-c m" . vr/mc-mark)))
  
#+END_SRC

** Flycheck

On-the-fly syntax checking.

#+BEGIN_SRC elisp
  (use-package flycheck
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-flycheck-mode)
    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+END_SRC

* Programming Languages
  
** TODO Tag Support

First of all, let's install GNU Global:

   #+BEGIN_SRC sh :tangle no
     sudo apt-get install -y global
   #+END_SRC

And then, Exuberant Ctags:

#+BEGIN_SRC sh :tangle no
  sudo apt-get install -y exuberant-ctags
#+END_SRC

*Note:* For every project run the following command:

#+BEGIN_SRC sh :tangle no
  ctags -e -R .
#+END_SRC

We access stuff by loading the =etags= package:

#+BEGIN_SRC elisp
  (require 'etags)
#+END_SRC

Now, use the following keys:

   - =M-.= :: To find the tag at point to jump to the function’s
            definition when the point is over a function call. It is a
            dwim-type function.
   - =M-,= :: jump back to where you were.
   - =M-?= :: find a tag, that is, use the Tags file to look up a
            definition. If there are multiple tags in the project with
            the same name, use `C-u M-.’ to go to the next match.
   - =M-x tags-search= :: regexp-search through the source files
        indexed by a tags file (a bit like =grep=)
   - =M-x tags-query-replace= :: query-replace through the source files
        indexed by a tags file
   - =M-x tags-apropos= :: list all tags in a tags file that match a
        regexp
   - =M-x list-tags= :: list all tags defined in a source file

We can update the tags file whenever we save a file:

#+BEGIN_SRC elisp
  (use-package ctags-update
    :ensure t
    :config
    (add-hook 'prog-mode-hook  'turn-on-ctags-auto-update-mode)
    :diminish ctags-auto-update-mode)
#+END_SRC

Combining =imenu= with an IDO interface nicely lists the
headings/functions in the current buffer:

#+BEGIN_SRC elisp
  (use-package idomenu
    :ensure t
    :bind ("C-c i" . idomenu))
#+END_SRC

Apparently, Helm is quite good:

#+BEGIN_SRC elisp
  (use-package helm
    :bind (("C-c M-i" . helm-imenu)))
#+END_SRC

** Code Block Folding
The Hide Show Minor mode allows us to fold all functions (hidden),
showing only the header lines. We need to turn on the mode, so
wrappers are in order:

#+BEGIN_SRC elisp
  (defun ha/hs-show-all ()
    (interactive)
    (hs-minor-mode 1)
    (hs-show-all))
  
  (defun ha/hs-hide-all ()
    (interactive)
    (hs-minor-mode 1)
    (hs-hide-all))
  
  (defun ha/hs-toggle-hiding ()
    (interactive)
    (hs-minor-mode 1)
    (hs-toggle-hiding))
#+END_SRC

Rebindings:

#+BEGIN_SRC elisp
  (use-package hs-minor-mode
    :bind
    ("C-c T h" . hs-minor-mode)
    ("C-c h a" . ha/hs-hide-all)
    ("C-c h s" . ha/hs-show-all)
    ("C-c h h" . ha/hs-toggle-hiding))
#+END_SRC

** Red Warnings

Various keywords (in comments) are now flagged in a Red Error font:

#+BEGIN_SRC elisp
  (add-hook 'prog-common-hook
            (lambda ()
              (font-lock-add-keywords nil
                                      '(("\\<\\(FIX\\|FIXME\\|TODO\\|BUG\\|HACK\\):" 1 font-lock-warning-face t)))))
#+END_SRC

** Paredit Mode
Keeps all parenthesis balanced in Lisp-oriented languages:

#+BEGIN_SRC elisp
  (use-package paredit
    :ensure t
    :diminish paredit-mode
    :init
      (add-hook 'emacs-lisp-mode-hook 'paredit-mode))
#+END_SRC
** Indentation

Use the BSD style with 3 spaces for indentation.
   
#+BEGIN_SRC elisp
  (setq c-default-style "bsd"
        c-basic-offset 3)
#+END_SRC

Do not indent namespaces:

#+BEGIN_SRC elisp
  (c-set-offset 'innamespace 0)
#+END_SRC

* Org Mode
See [[file:emacs-org.org][emacs-org-mode.el]].

#+BEGIN_SRC elisp
  (require 'init-org-mode)
#+END_SRC

* Tools
** TODO Magit
* Look And Feel

See [[file:emacs-graphical.org][emacs-graphical.el]].
  
  #+BEGIN_SRC elisp
    (when (window-system)
          (require 'init-client))
  #+END_SRC
* TODO Offline documentation: Dash/Zealdocs
