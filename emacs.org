#+TITLE:  Emacs Configuration File
#+AUTHOR: Sebastián Múnera-Álvarez
#+EMAIL:  sfmunera@gmail.com
#+PROPERTY:    results silent
#+PROPERTY:    header-args:sh  :tangle no
#+PROPERTY:    tangle ~/.emacs
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org

* Introduction
So, I have been following Howard Abrams' blog about Emacs, and I
decided to follow his advice on [[http://www.howardism.org/Technical/Emacs/emacs-init.html][customizing Emacs]] using literate
programming. Much of what appears here is based on [[https://github.com/howardabrams/dot-files/blob/master/emacs.org][this Org file]].

*NOTE*: For every change, type =C-c C-v C-t=.

** General settings

#+BEGIN_SRC elisp
(defun sm/expand-emacs-subdirectory (d) (expand-file-name d "~/.emacs.d/"))
#+END_SRC

** Directory structure

Just to make sure that the following subdirectories exist:

#+BEGIN_SRC elisp
  (let* ((subdirs '("elisp" "ac-dict"))
         (fulldirs (mapcar (lambda (d) (sm/expand-emacs-subdirectory d)) subdirs)))
    (dolist (dir fulldirs)
      (when (not (file-exists-p dir))
        (message "Make directory: %s" dir)
        (make-directory dir))))
#+END_SRC

** Setting up the load path

Extra scripts go in =~/.emacs.d/elisp=:

#+BEGIN_SRC elisp
  (add-to-list 'load-path "~/.emacs.d/elisp")
#+END_SRC

* Package installation

First, let's add the Emacs repositories (run once and comment this
block out):
  
#+BEGIN_SRC elisp
  (require 'package)
  
  (setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                           ("gnu"       . "http://elpa.gnu.org/packages/")
                           ("melpa"     . "http://melpa.milkbox.net/packages/")
                           ("marmalade" . "http://marmalade-repo.org/packages/")))
  (package-initialize)
;  (package-refresh-contents)
#+END_SRC

To install a package: =M-x package-list-packages=.

** Use-package

Run once and comment this block out.
   
#+BEGIN_SRC elisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  
  (require 'use-package)
#+END_SRC

* Variables
** Tabs vs Spaces

Let's just use spaces everywhere.

#+BEGIN_SRC elisp
  (setq-default indent-tabs-mode nil)
  (setq tab-width 3)
#+END_SRC

Make tab key do indent first then completion.

#+BEGIN_SRC elisp
  (setq-default tab-always-indent 'complete)
#+END_SRC

** Initial screen

#+BEGIN_SRC elisp
  (setq inhibit-splash-screen t)
  (setq inhibit-startup-screen t)
#+END_SRC
   
** Line and Column number

Show the current line and column numbers in the stats bar as well.
   
#+BEGIN_SRC elisp
  (line-number-mode t)
  (column-number-mode t)
#+END_SRC
   
** Highlight Parentheses

Highlight parentheses when the cursor is next to them:

#+BEGIN_SRC elisp
  (require 'paren)
  (show-paren-mode t)
#+END_SRC

** Safe color themes
Set all color themes as safe.
 
#+BEGIN_SRC elisp
(setq custom-safe-themes t)
#+END_SRC
   
* Display Settings

Let's just get more screen space:

#+BEGIN_SRC elisp
  (setq initial-scratch-message "")
  (setq visible-bell t)
  
  (when (window-system)
    (tool-bar-mode 0)
    (when (fboundp 'horizontal-scroll-bar-mode)
      (horizontal-scroll-bar-mode -1))
    (scroll-bar-mode -1))
#+END_SRC

** Fill-mode

Automatically wrapping when you get to the end of a line (or the
fill-region):

#+BEGIN_SRC elisp
  (use-package fill
    :bind ("C-c T f" . auto-fill-mode)
    :init (add-hook 'org-mode-hook 'turn-on-auto-fill)
    :diminish auto-fill-mode)
#+END_SRC

Number of characters until the fill column:

#+BEGIN_SRC elisp
  (setq fill-column 140)
#+END_SRC

* Key Bindings
** Jump to windows

Set up [[https://github.com/abo-abo/ace-window][ace-window]] mode:

#+BEGIN_SRC elisp
  (use-package ace-window
    :ensure t
    :init
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
      (global-set-key (kbd "C-x o") 'ace-window)
      :diminish ace-window-mode)
#+END_SRC

This is really cool. When there are more than two windows, by
pressing =C-x o= it is possible to jump to any window by writing the
letter in the upper-left corner.
 
** Multiple cursors

This is the [[https://github.com/emacsmirror/multiple-cursors][multiple-cursors]] functionality:

#+BEGIN_SRC elisp  
  (use-package multiple-cursors
    :ensure t
    :config
    (global-set-key
     (kbd "C-c C-.")
     (defhydra hydra-multiple-cursors ()
       "multiple-cursors"
       ("." mc/mark-all-dwim                   "all-dwim")
       ("C-." mc/mark-all-like-this-dwim       "all-like-dwim")
       ("n" mc/mark-next-like-this             "next")
       ("p" mc/mark-previous-like-this         "previous")
       ("a" mc/mark-all-like-this              "mark-all")
       ("N" mc/mark-next-symbol-like-this      "next-symbol")
       ("P" mc/mark-previous-symbol-like-this  "previous-symbol")
       ("A" mc/mark-all-symbols-like-this      "all-symbols")
       ("f" mc/mark-all-like-this-in-defun     "in-func")
       ("l" mc/edit-lines                      "all-lines")
       ("e" mc/edit-ends-of-lines              "end-lines"))))
  
#+END_SRC

Use =C-c C-.= and a menu option to select multiple cursors.

** Expand region

This is an extended version of the [[https://github.com/magnars/expand-region.el][expand-region]] taken from [[by ][here]]. To
select increasing regions around cursor, use =C-==.

#+BEGIN_SRC elisp
  (use-package expand-region
    :ensure t
    :config
    (defun ha/expand-region (lines)
      "Prefix-oriented wrapper around Magnar's `er/expand-region'.
  
  Call with LINES equal to 1 (given no prefix), it expands the
  region as normal.  When LINES given a positive number, selects
  the current line and number of lines specified.  When LINES is a
  negative number, selects the current line and the previous lines
  specified.  Select the current line if the LINES prefix is zero."
      (interactive "p")
      (cond ((= lines 1)   (er/expand-region 1))
            ((< lines 0)   (ha/expand-previous-line-as-region lines))
            (t             (ha/expand-next-line-as-region (1+ lines)))))
  
    (defun ha/expand-next-line-as-region (lines)
      (message "lines = %d" lines)
      (beginning-of-line)
      (set-mark (point))
      (end-of-line lines))
  
    (defun ha/expand-previous-line-as-region (lines)
      (end-of-line)
      (set-mark (point))
      (beginning-of-line (1+ lines)))
  
    :bind ("C-=" . ha/expand-region))
#+END_SRC

* Loading and finding files
** Helm

#+BEGIN_SRC elisp
  (use-package helm
    :ensure t
    :init
    (use-package helm-config))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package helm
    :bind (("C-c M-i" . helm-imenu)))
#+END_SRC

#+BEGIN_SRC elisp
  (global-set-key (kbd "M-x") #'helm-M-x)
  (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
  (global-set-key (kbd "C-x C-f") #'helm-find-files)
#+END_SRC
* Miscellaneous
** Line Numbers

Turn automatically =linum-mode= for programming modes:

#+BEGIN_SRC elisp
  (add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC

Use =linum-relative= mode to insert relative line numbers.
To toggle between absolute and relative =linum-mode='s, use
=s-k= (Windows-k).

#+BEGIN_SRC elisp
(use-package linum-relative
  :ensure t
  :config
  ;; Otherwise, let's take advantage of the relative line numbering:
  (defun linum-new-mode ()
    "If line numbers aren't displayed, then display them.
     Otherwise, toggle between absolute and relative numbers."
    (interactive)
    (if linum-mode
        (linum-relative-toggle)
      (linum-mode 1)))

  :bind ("s-k" . linum-new-mode))
#+END_SRC

** Visual Regular Expressions

Hightlights the searches while writing a regular expression.

Begin with =C-c r= then type the regexp. To see the highlighted
matches, type =C-c a= before you hit ‘Return’ to accept it.

#+BEGIN_SRC elisp
  (use-package visual-regexp
    :ensure t
    :init
    (use-package visual-regexp-steroids :ensure t)
  
    :bind (("C-c r" . vr/replace)
           ("C-c q" . vr/query-replace))
  
    ;; if you use multiple-cursors, this is for you:
    :config (use-package  multiple-cursors
              :bind ("C-c m" . vr/mc-mark)))
  
#+END_SRC

* Programming Languages
** Paredit Mode
Keeps all parenthesis balanced in Lisp-oriented languages:

#+BEGIN_SRC elisp
  (use-package paredit
    :ensure t
    :diminish paredit-mode
    :init
      (add-hook 'emacs-lisp-mode-hook 'paredit-mode))
#+END_SRC
** Indentation

Use the BSD style with 3 spaces for indentation.
   
#+BEGIN_SRC elisp
  (setq c-default-style "bsd"
        c-basic-offset 3)
#+END_SRC

Do not indent namespaces:

#+BEGIN_SRC elisp
  (c-set-offset 'innamespace 0)
#+END_SRC
* Tools
** Magit

   [[http://philjackson.github.com/magit/magit.html][Magit]] is a front end for Git. Check out [[https://www.youtube.com/watch?v=vQO7F2Q9DwA][this video]].

   #+BEGIN_SRC elisp
     (use-package magit
       :ensure t
       :commands magit-status magit-blame
       :init
       (defadvice magit-status (around magit-fullscreen activate)
         (window-configuration-to-register :magit-fullscreen)
         ad-do-it
         (delete-other-windows))
       :config
       (setq magit-branch-arguments nil
             ;; use ido to look for branches
             magit-completing-read-function 'magit-ido-completing-read
             ;; don't put "origin-" in front of new branch names by default
             magit-default-tracking-name-function 'magit-default-tracking-name-branch-only
             magit-push-always-verify nil
             ;; Get rid of the previous advice to go into fullscreen
             magit-restore-window-configuration t)

       :bind ("C-x g" . magit-status))
   #+END_SRC

* Org Mode
See [[file:emacs-org.org][emacs-org-mode.el]].

#+BEGIN_SRC elisp
  (require 'init-org-mode)
#+END_SRC
   
* Look And Feel

See [[file:emacs-graphical.org][emacs-graphical.el]].
  
  #+BEGIN_SRC elisp
    (when (window-system)
          (require 'init-client))
  #+END_SRC
